// lib/screens/accommodations/accommodation_details_screen.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import '../../models/accommodation.dart';
import '../../services/accommodation_service.dart';
import 'room_details_screen.dart';

class AccommodationDetailsScreen extends StatefulWidget {
  final int accommodationId;

  const AccommodationDetailsScreen({
    Key? key,
    required this.accommodationId,
  }) : super(key: key);

  @override
  _AccommodationDetailsScreenState createState() => _AccommodationDetailsScreenState();
}

class _AccommodationDetailsScreenState extends State<AccommodationDetailsScreen> {
  final AccommodationService _accommodationService = AccommodationService();
  late Future<Accommodation> _accommodationFuture;
  bool _isLoading = true;
  int _currentImageIndex = 0;
  final PageController _imagePageController = PageController();
  bool _showAllAmenities = false;
  bool _isReviewExpanded = false;
  bool _isWritingReview = false;

  // For review form
  final _reviewFormKey = GlobalKey<FormState>();
  int _rating = 5;
  final _commentController = TextEditingController();
  List<File> _selectedImages = [];
  final _imagePicker = ImagePicker();

  @override
  void initState() {
    super.initState();
    _loadAccommodation();
  }

  @override
  void dispose() {
    _imagePageController.dispose();
    _commentController.dispose();
    super.dispose();
  }

  Future<void> _loadAccommodation() async {
    setState(() {
      _isLoading = true;
      _accommodationFuture = _accommodationService.getAccommodationDetails(widget.accommodationId);
    });

    try {
      await _accommodationFuture;
    } catch (e) {
      // Error handling in the FutureBuilder
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _pickImages() async {
    final pickedFiles = await _imagePicker.pickMultiImage();
    if (pickedFiles.isNotEmpty) {
      setState(() {
        _selectedImages.addAll(pickedFiles.map((file) => File(file.path)).toList());
      });
    }
  }

  void _removeImage(int index) {
    setState(() {
      _selectedImages.removeAt(index);
    });
  }

  Future<void> _submitReview(int accommodationId) async {
    if (!_reviewFormKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      await _accommodationService.submitReview(
        accommodationId: accommodationId,
        rating: _rating,
        comment: _commentController.text.trim(),
        images: _selectedImages,
      );

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Review submitted successfully')),
      );

      // Clear form and reload data
      setState(() {
        _isWritingReview = false;
        _rating = 5;
        _commentController.clear();
        _selectedImages.clear();
      });

      _loadAccommodation();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error submitting review: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : FutureBuilder<Accommodation>(
        future: _accommodationFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting && _isLoading) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error_outline, size: 48, color: Colors.red),
                  SizedBox(height: 16),
                  Text('Error: ${snapshot.error}'),
                  SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _loadAccommodation,
                    child: Text('Try Again'),
                  ),
                ],
              ),
            );
          } else if (!snapshot.hasData) {
            return Center(
              child: Text('Accommodation not found'),
            );
          }

          final accommodation = snapshot.data!;

          return CustomScrollView(
            slivers: [
              // App Bar with Image Carousel
              SliverAppBar(
                expandedHeight: 250,
                pinned: true,
                flexibleSpace: FlexibleSpaceBar(
                  background: Stack(
                    children: [
                      // Image Carousel
                      PageView.builder(
                        controller: _imagePageController,
                        itemCount: accommodation.images.isEmpty ? 1 : accommodation.images.length,
                        onPageChanged: (index) {
                          setState(() {
                            _currentImageIndex = index;
                          });
                        },
                        itemBuilder: (context, index) {
                          return accommodation.images.isEmpty
                              ? Container(
                            color: Colors.grey[300],
                            child: Icon(
                              Icons.hotel,
                              size: 80,
                              color: Colors.grey[500],
                            ),
                          )
                              : Image.network(
                            'http://10.0.2.2:8080${accommodation.images[index].url}',
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) {
                              return Container(
                                color: Colors.grey[300],
                                child: Icon(
                                  Icons.hotel,
                                  size: 80,
                                  color: Colors.grey[500],
                                ),
                              );
                            },
                          );
                        },
                      ),

                      // Image indicator
                      if (accommodation.images.length > 1)
                        Positioned(
                          bottom: 16,
                          left: 0,
                          right: 0,
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: List.generate(
                              accommodation.images.length,
                                  (index) => Container(
                                width: 8,
                                height: 8,
                                margin: EdgeInsets.symmetric(horizontal: 2),
                                decoration: BoxDecoration(
                                  shape: BoxShape.circle,
                                  color: _currentImageIndex == index
                                      ? Colors.white
                                      : Colors.white.withOpacity(0.5),
                                ),
                              ),
                            ),
                          ),
                        ),

                      // Gradient overlay for better text visibility
                      Positioned(
                        bottom: 0,
                        left: 0,
                        right: 0,
                        child: Container(
                          height: 100,
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              begin: Alignment.bottomCenter,
                              end: Alignment.topCenter,
                              colors: [
                                Colors.black.withOpacity(0.7),
                                Colors.transparent,
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              // Content
              SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Title and Type
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: Text(
                              accommodation.name,
                              style: TextStyle(
                                fontSize: 24,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: Theme.of(context).primaryColor.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              accommodation.type,
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                                color: Theme.of(context).primaryColor,
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 8),

                      // Location
                      Row(
                        children: [
                          Icon(Icons.location_on, size: 16, color: Colors.grey[600]),
                          SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              '${accommodation.city}, ${accommodation.address}',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey[600],
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 8),

                      // Ratings
                      Row(
                        children: [
                          Row(
                            children: List.generate(5, (index) {
                              return Icon(
                                index < accommodation.averageRating.floor()
                                    ? Icons.star
                                    : index < accommodation.averageRating
                                    ? Icons.star_half
                                    : Icons.star_border,
                                size: 20,
                                color: Colors.amber,
                              );
                            }),
                          ),
                          SizedBox(width: 8),
                          Text(
                            '${accommodation.averageRating.toStringAsFixed(1)} (${accommodation.reviews.length} reviews)',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[700],
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),

                      // Description
                      Text(
                        'Description',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        accommodation.description,
                        style: TextStyle(
                          fontSize: 15,
                          color: Colors.grey[800],
                          height: 1.5,
                        ),
                      ),
                      SizedBox(height: 16),

                      // Amenities
                      Text(
                        'Amenities',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 8),
                      if (accommodation.amenities.isEmpty)
                        Text(
                          'No amenities listed',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[600],
                            fontStyle: FontStyle.italic,
                          ),
                        )
                      else
                        Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: accommodation.amenities
                              .take(_showAllAmenities ? accommodation.amenities.length : 6)
                              .map((amenity) => Chip(
                            label: Text(amenity),
                            backgroundColor: Colors.grey[200],
                            labelStyle: TextStyle(
                              fontSize: 12,
                              color: Colors.black87,
                            ),
                          ))
                              .toList(),
                        ),
                      if (accommodation.amenities.length > 6)
                        TextButton(
                          onPressed: () {
                            setState(() {
                              _showAllAmenities = !_showAllAmenities;
                            });
                          },
                          child: Text(
                            _showAllAmenities ? 'Show Less' : 'Show All (${accommodation.amenities.length})',
                          ),
                        ),
                      SizedBox(height: 16),

                      // Room Types
                      Text(
                        'Available Rooms',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 8),
                      if (accommodation.roomTypes.isEmpty)
                        Text(
                          'No rooms available',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[600],
                            fontStyle: FontStyle.italic,
                          ),
                        )
                      else
                        ListView.builder(
                          shrinkWrap: true,
                          physics: NeverScrollableScrollPhysics(),
                          itemCount: accommodation.roomTypes.length,
                          itemBuilder: (context, index) {
                            final roomType = accommodation.roomTypes[index];
                            return Card(
                              margin: EdgeInsets.only(bottom: 12),
                              child: InkWell(
                                onTap: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => RoomDetailsScreen(
                                        accommodationName: accommodation.name,
                                        roomType: roomType,
                                      ),
                                    ),
                                  );
                                },
                                child: Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Expanded(
                                            child: Text(
                                              roomType.name,
                                              style: TextStyle(
                                                fontSize: 16,
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                          ),
                                          Text(
                                            roomType.formattedPrice,
                                            style: TextStyle(
                                              fontSize: 16,
                                              fontWeight: FontWeight.bold,
                                              color: Theme.of(context).primaryColor,
                                            ),
                                          ),
                                        ],
                                      ),
                                      SizedBox(height: 4),
                                      Text(
                                        'Max Guests: ${roomType.maxGuests}',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.grey[700],
                                        ),
                                      ),
                                      if (roomType.bedType.isNotEmpty) ...[
                                        SizedBox(height: 4),
                                        Text(
                                          'Bed: ${roomType.bedType}',
                                          style: TextStyle(
                                            fontSize: 14,
                                            color: Colors.grey[700],
                                          ),
                                        ),
                                      ],
                                      SizedBox(height: 8),
                                      if (roomType.description.isNotEmpty)
                                        Text(
                                          roomType.description,
                                          style: TextStyle(
                                            fontSize: 14,
                                            color: Colors.grey[600],
                                          ),
                                          maxLines: 2,
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      SizedBox(height: 8),
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                        children: [
                                          Expanded(
                                            child: roomType.amenities.isNotEmpty
                                                ? Wrap(
                                              spacing: 4,
                                              runSpacing: 4,
                                              children: roomType.amenities
                                                  .take(3)
                                                  .map((amenity) => Container(
                                                padding: EdgeInsets.symmetric(
                                                  horizontal: 6,
                                                  vertical: 2,
                                                ),
                                                decoration: BoxDecoration(
                                                  color: Colors.grey[200],
                                                  borderRadius: BorderRadius.circular(4),
                                                ),
                                                child: Text(
                                                  amenity,
                                                  style: TextStyle(
                                                    fontSize: 10,
                                                    color: Colors.grey[800],
                                                  ),
                                                ),
                                              ))
                                                  .toList(),
                                            )
                                                : SizedBox.shrink(),
                                          ),
                                          Icon(
                                            Icons.arrow_forward_ios,
                                            size: 16,
                                            color: Colors.grey[400],
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                      SizedBox(height: 20),

                      // Reviews Section
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Reviews',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          if (!_isWritingReview)
                            TextButton.icon(
                              onPressed: () {
                                setState(() {
                                  _isWritingReview = true;
                                });
                              },
                              icon: Icon(Icons.rate_review),
                              label: Text('Write a Review'),
                            ),
                        ],
                      ),

                      // Review Form
                      if (_isWritingReview)
                        Card(
                          margin: EdgeInsets.symmetric(vertical: 16),
                          child: Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Form(
                              key: _reviewFormKey,
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'Write Your Review',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  SizedBox(height: 16),

                                  // Rating
                                  Text(
                                    'Rating',
                                    style: TextStyle(
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                  SizedBox(height: 8),
                                  Row(
                                    children: List.generate(5, (index) {
                                      return IconButton(
                                        icon: Icon(
                                          index < _rating ? Icons.star : Icons.star_border,
                                          color: Colors.amber,
                                        ),
                                        onPressed: () {
                                          setState(() {
                                            _rating = index + 1;
                                          });
                                        },
                                      );
                                    }),
                                  ),
                                  SizedBox(height: 16),

                                  // Review text
                                  TextFormField(
                                    controller: _commentController,
                                    decoration: InputDecoration(
                                      labelText: 'Your Review',
                                      hintText: 'Share your experience with this accommodation...',
                                      border: OutlineInputBorder(),
                                    ),
                                    maxLines: 4,
                                    validator: (value) {
                                      if (value == null || value.trim().isEmpty) {
                                        return 'Please enter your review';
                                      }
                                      return null;
                                    },
                                  ),
                                  SizedBox(height: 16),

                                  // Image Upload
                                  Text(
                                    'Add Photos (Optional)',
                                    style: TextStyle(
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                  SizedBox(height: 8),
                                  Row(
                                    children: [
                                      ElevatedButton.icon(
                                        onPressed: _pickImages,
                                        icon: Icon(Icons.photo_library),
                                        label: Text('Select Images'),
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: Colors.grey[200],
                                          foregroundColor: Colors.black87,
                                        ),
                                      ),
                                    ],
                                  ),
                                  SizedBox(height: 8),

                                  // Selected Images Preview
                                  if (_selectedImages.isNotEmpty)
                                    Container(
                                      height: 100,
                                      child: ListView.builder(
                                        scrollDirection: Axis.horizontal,
                                        itemCount: _selectedImages.length,
                                        itemBuilder: (context, index) {
                                          return Stack(
                                            children: [
                                              Container(
                                                width: 100,
                                                height: 100,
                                                margin: EdgeInsets.only(right: 8),
                                                decoration: BoxDecoration(
                                                  borderRadius: BorderRadius.circular(8),
                                                  image: DecorationImage(
                                                    image: FileImage(_selectedImages[index]),
                                                    fit: BoxFit.cover,
                                                  ),
                                                ),
                                              ),
                                              Positioned(
                                                top: 4,
                                                right: 12,
                                                child: GestureDetector(
                                                  onTap: () => _removeImage(index),
                                                  child: Container(
                                                    padding: EdgeInsets.all(4),
                                                    decoration: BoxDecoration(
                                                      color: Colors.white,
                                                      shape: BoxShape.circle,
                                                    ),
                                                    child: Icon(
                                                      Icons.close,
                                                      size: 16,
                                                      color: Colors.red,
                                                    ),
                                                  ),
                                                ),
                                              ),
                                            ],
                                          );
                                        },
                                      ),
                                    ),
                                  SizedBox(height: 16),

                                  // Submit buttons
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.end,
                                    children: [
                                      TextButton(
                                        onPressed: () {
                                          setState(() {
                                            _isWritingReview = false;
                                            _rating = 5;
                                            _commentController.clear();
                                            _selectedImages.clear();
                                          });
                                        },
                                        child: Text('Cancel'),
                                      ),
                                      SizedBox(width: 8),
                                      ElevatedButton(
                                        onPressed: () => _submitReview(accommodation.id),
                                        child: Text('Submit Review'),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),

                      // Reviews List
                      if (accommodation.reviews.isEmpty)
                        Padding(
                          padding: const EdgeInsets.symmetric(vertical: 16.0),
                          child: Text(
                            'No reviews yet. Be the first to leave a review!',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[600],
                              fontStyle: FontStyle.italic,
                            ),
                          ),
                        )
                      else
                        Column(
                          children: [
                            // Show top 2 reviews by default
                            ...accommodation.reviews
                                .take(_isReviewExpanded ? accommodation.reviews.length : 2)
                                .map((review) => _buildReviewCard(review)),
                            if (accommodation.reviews.length > 2)
                              TextButton(
                                onPressed: () {
                                  setState(() {
                                    _isReviewExpanded = !_isReviewExpanded;
                                  });
                                },
                                child: Text(
                                  _isReviewExpanded
                                      ? 'Show Less'
                                      : 'Show All (${accommodation.reviews.length})',
                                ),
                              ),
                          ],
                        ),
                      SizedBox(height: 16),

                      // Website
                      if (accommodation.website.isNotEmpty) ...[
                        Text(
                          'Website',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 8),
                        InkWell(
                          onTap: () {
                            // Launch URL using url_launcher package
                            // You would need to add this dependency
                          },
                          child: Text(
                            accommodation.website,
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.blue,
                              decoration: TextDecoration.underline,
                            ),
                          ),
                        ),
                        SizedBox(height: 20),
                      ],
                    ],
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget _buildReviewCard(AccommodationReview review) {
    return Card(
// lib/screens/accommodations/accommodation_details_screen.dart (continued)
      margin: EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
                  child: Text(
                    review.username.isNotEmpty ? review.username[0].toUpperCase() : '?',
                    style: TextStyle(
                      color: Theme.of(context).primaryColor,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        review.username,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        review.formattedDate,
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ),
                Row(
                  children: List.generate(5, (index) {
                    return Icon(
                      index < review.rating ? Icons.star : Icons.star_border,
                      size: 18,
                      color: Colors.amber,
                    );
                  }),
                ),
              ],
            ),
            SizedBox(height: 12),
            Text(review.comment),

            // Review images (if any)
            if (review.images.isNotEmpty) ...[
              SizedBox(height: 12),
              Container(
                height: 100,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: review.images.length,
                  itemBuilder: (context, index) {
                    return GestureDetector(
                      onTap: () {
                        // Show full-screen image viewer
                        // This would typically use a package like photo_view
                      },
                      child: Container(
                        width: 100,
                        height: 100,
                        margin: EdgeInsets.only(right: 8),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          image: DecorationImage(
                            image: NetworkImage('http://10.0.2.2:8080${review.images[index].url}'),
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}